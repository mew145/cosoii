// =============================================
// INICIALIZACI√ìN DEL SISTEMA
// Sistema de Gesti√≥n de Riesgos COSO II + ISO 27001
// =============================================

import { logConfigurationStatus, validateEnvironmentVariables } from './config/validation'
import { appConfig } from './config'

// =============================================
// INICIALIZACI√ìN DE LA APLICACI√ìN
// =============================================

export function initializeApp() {
  // Solo ejecutar en el servidor
  if (typeof window !== 'undefined') {
    return
  }

  console.log(`\nüöÄ Iniciando ${appConfig.app.name}`)
  console.log(`üìç Entorno: ${appConfig.app.environment}`)
  console.log(`üè¢ Empresa: ${appConfig.app.company}`)
  console.log(`üì¶ Versi√≥n: ${appConfig.app.version}`)

  // Validar configuraci√≥n
  const validation = validateEnvironmentVariables()

  if (!validation.isValid) {
    console.error('\n‚ùå ERRORES DE CONFIGURACI√ìN:')
    validation.errors.forEach(error => console.error(`   - ${error}`))
    console.error('\nüí° Revisa el archivo .env.local y .env.example para m√°s informaci√≥n\n')

    if (appConfig.app.environment === 'production') {
      throw new Error('Configuraci√≥n inv√°lida en producci√≥n')
    }
  }

  // Mostrar estado de configuraci√≥n
  logConfigurationStatus()

  // Mostrar informaci√≥n de caracter√≠sticas
  console.log('üéØ Sistema listo para:')
  console.log(`   - Gesti√≥n de Riesgos COSO ERM 2017: ‚úÖ`)
  console.log(`   - ISO 27001:2022: ${appConfig.features.enableISO27001 ? '‚úÖ' : '‚ùå'}`)
  console.log(`   - Autenticaci√≥n OAuth: ${appConfig.features.enableOAuth ? '‚úÖ' : '‚ùå'}`)
  console.log(`   - Auditor√≠a de Cambios: ${appConfig.features.enableAuditTrail ? '‚úÖ' : '‚ùå'}`)
  console.log(`   - Notificaciones: ${appConfig.features.enableNotifications ? '‚úÖ' : '‚ùå'}`)

  console.log('\nüåê Acceso:')
  console.log(`   - URL: ${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}`)
  console.log(`   - Supabase: ${appConfig.supabase.url}`)

  console.log('\n=====================================\n')
}

// =============================================
// VALIDACI√ìN EN TIEMPO DE EJECUCI√ìN
// =============================================

export function validateRuntimeConfiguration() {
  const validation = validateEnvironmentVariables()

  if (!validation.isValid) {
    const errorMessage = `Configuraci√≥n inv√°lida: ${validation.errors.join(', ')}`

    if (appConfig.app.environment === 'production') {
      throw new Error(errorMessage)
    } else {
      console.warn(`‚ö†Ô∏è ${errorMessage}`)
    }
  }

  return validation
}

// =============================================
// INFORMACI√ìN DEL SISTEMA
// =============================================

export function getSystemInfo() {
  return {
    app: {
      name: appConfig.app.name,
      version: appConfig.app.version,
      environment: appConfig.app.environment,
      company: appConfig.app.company,
    },
    features: appConfig.features,
    supabase: {
      url: appConfig.supabase.url,
      projectId: appConfig.supabase.projectId,
      configured: !!appConfig.supabase.url && !!appConfig.supabase.anonKey,
    },
    oauth: {
      enabled: appConfig.features.enableOAuth,
      providers: Object.entries(appConfig.oauth)
        .filter(([_, config]) => config.enabled)
        .map(([name, config]) => ({
          name,
          enabled: config.enabled,
          configured: !!config.clientId,
        })),
    },
    timestamp: new Date().toISOString(),
  }
}

// Ejecutar inicializaci√≥n autom√°ticamente
if (typeof window === 'undefined' && process.env.NODE_ENV !== 'test') {
  initializeApp()
}
